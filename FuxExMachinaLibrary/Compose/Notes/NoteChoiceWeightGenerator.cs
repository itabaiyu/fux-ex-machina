using System.Collections.Generic;
using System.Linq;
using Atrea.Utilities;

namespace FuxExMachinaLibrary.Compose.Notes
{
    /// <summary>
    /// A class responsible for initializing and creating a list of NoteChoiceWeight's, which
    /// represent the entire possible roll space to be used when choosing notes for the composition.
    /// </summary>
    public class NoteChoiceWeightGenerator
    {
        /// <summary>
        /// Random number generator used to create weights, roll spaces, rolls, etc.
        /// </summary>
        private readonly CryptoRandom _random;

        /// <summary>
        /// The scaling factor to explode the roll space out to. This introduces greater
        /// variety amongst the possible weights generated by this class.
        /// </summary>
        private const int ScalingFactor = 100000;

        /// <summary>
        /// NoteChoiceWeightGenerator constructor.
        /// </summary>
        /// <param name="random"></param>
        public NoteChoiceWeightGenerator(CryptoRandom random)
        {
            _random = random;
        }

        /// <summary>
        /// Retrieves a random, valid NoteChoiceWeight value, to be used when choosing the next
        /// NoteChoice.
        /// </summary>
        /// <param name="totalNoteChoices">The total number of note choices we are rolling for</param>
        /// <returns>A random, valid NoteChoiceWeight value</returns>
        public int RollForNoteWeight(int totalNoteChoices)
        {
            return _random.Next(totalNoteChoices * ScalingFactor);
        }

        /// <summary>
        /// Rolls for a random value between 0 and the passed count value.
        /// </summary>
        /// <param name="max">The maximum value to roll for. Non-inclusive</param>
        /// <returns>A random integer value between 0 and the passed max value.</returns>
        public int Roll(int max)
        {
            return _random.Next(max);
        }

        /// <summary>
        /// Retrieves the maximum NoteChoiceWeight WeightCeiling value for a given number of note choices.
        /// </summary>
        /// <param name="totalNoteChoices">The total number of note choices</param>
        /// <returns>The maximum NoteChoiceWeight WeightCeiling value</returns>
        public int GetNoteChoiceWeightCeiling(int totalNoteChoices)
        {
            return totalNoteChoices * ScalingFactor;
        }

        /// <summary>
        /// Generates a list of NoteChoiceWeights which encapsulate the concept of a roll space. Each
        /// NoteChoiceWeight has a randomly generated weight value, then they are combined into a list
        /// and WeightFloor and WeightCeiling values are assigned.
        /// </summary>
        /// <param name="totalNoteChoices">The total number of note choices to generate NoteChoiceWeights for</param>
        /// <returns>A list of NoteChoiceWeight objects</returns>
        public IEnumerable<NoteChoiceWeight> GenerateNoteChoiceWeights(int totalNoteChoices)
        {
            var targetNoteWeightChoiceSum = GetNoteChoiceWeightCeiling(totalNoteChoices);
            var currentNoteWeightChoiceSum = 0;

            var weights = new List<int>();
            var totalNoteChoiceIndexes = Enumerable.Range(0, totalNoteChoices).ToList();

            foreach (var unused in totalNoteChoiceIndexes)
            {
                var nextWeight = _random.Next(targetNoteWeightChoiceSum);

                weights.Add(nextWeight);
                currentNoteWeightChoiceSum += nextWeight;
            }

            var targetScalingFactor = 1d * targetNoteWeightChoiceSum / currentNoteWeightChoiceSum;
            currentNoteWeightChoiceSum = 0;

            foreach (var index in totalNoteChoiceIndexes)
            {
                weights[index] = (int) (weights[index] * targetScalingFactor);

                currentNoteWeightChoiceSum += weights[index];
            }

            while (currentNoteWeightChoiceSum++ < targetNoteWeightChoiceSum)
            {
                weights[_random.Next(totalNoteChoices)]++;
            }

            return GetNoteChoiceWeightsFromWeights(weights);
        }

        /// <summary>
        /// Generates a list of NoteChoiceWeights from a given enumerable of int weight values.
        /// </summary>
        /// <param name="weights">The weight values to generate NoteChoiceWeights from</param>
        /// <returns>A list of NoteChoiceWeight objects</returns>
        private static IEnumerable<NoteChoiceWeight> GetNoteChoiceWeightsFromWeights(IEnumerable<int> weights)
        {
            var currentWeightFloor = 0;
            var noteChoiceWeights = new List<NoteChoiceWeight>();

            foreach (var currentWeight in weights)
            {
                noteChoiceWeights.Add(
                    new NoteChoiceWeight(
                        currentWeight,
                        currentWeightFloor == 0 ? currentWeightFloor : currentWeightFloor + 1,
                        currentWeightFloor + currentWeight
                    )
                );

                currentWeightFloor += currentWeight;
            }

            return noteChoiceWeights;
        }
    }
}